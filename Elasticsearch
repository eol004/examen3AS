-- OPERACIONES CRUD --

** Crear un indice **

(SIN CONTRASEÑA)
curl -H "Content-Type: application/json" -XPUT 127.0.0.1:9200/<NomIndice>

** Cargar dataset **

Si se necesita pasar de local a remoto, en local hacer: scp /home/estefania/Escritorio/<NomArchivo>.json estefania@34.76.205.238:/home/estefania/elasticsearch

curl -H "Content-Type: application/json" -XPUT '127.0.0.1:9200/<NomINdice>/_bulk' --data-binary @<nombreArchivo>.json

** Crear un indice con un mapping con campos: **

(SIN CONTRASEÑA)
curl -H "Content-Type: application/json" -XPUT http://127.0.0.1:9200/<nombreIndice> -d '
{ "mappings": {
"properties": {
"<NombreCampo>": { "type": "text"},
"author": {"type": "text"},
"resumen": {"type": "text"}}}}'

(CON CONTRASEÑA)
curl --cacert http_ca.crt -u elastic:<CONTRASEÑA> -H "Content-Type: application/json" -XPUT https://127.0.0.1:9200/<nombreIndice> -d '
{ "mappings": {
"properties": {
"<NombreCampo>": { "type": "text"},
"author": {"type": "text"},
"resumen": {"type": "text"}}}}'

** Añadir campos **

(CON CONTRASEÑA)
curl --cacert http_ca.crt -u elastic:<CONTRASEÑA> -H "Content-Type: application/json" -XPUT https://127.0.0.1:9200/libros/_doc/<FILA> -d '
{
"<NombreCampo>": "Cuento de Navidad",
"autor": "Charles Dickens",
"resumen": "Una historia"
}'

(SIN CONTRASEÑA)
curl -H "Content-Type: application/json" -XPUT http://127.0.0.1:9200/<nomIndice>/_doc/<FILA> -d '
{
"<NombreCampo>": "Mi libro",
"autor": "Luna de pluton",
"resumen": "Mi historia"
}'

** Editar datos **

(CON CONTRASEÑA)
curl --cacert http_ca.crt -u elastic:<CONTRASEÑA> -H "Content-Type: application/json" -XPOST https://127.0.0.1:9200/peliculas/_update/2 -d '
{
"doc":{
"anyo": "2000"}
}'

(SIN CONTRASEÑA)
curl -H "Content-Type: application/json" -XPOST '127.0.0.1:9200/<NOMINDICE>/_update/<NUMINDICE>' -d '
{"doc": 
{"<NomCampoAEditar": <dato>}
}'

** Borrar documento **

(CON CONTRASEÑA)
curl --cacert http_ca.crt -u elastic:<CONTRASEÑA> -H "Content-Type: application/json" -XDELETE https://127.0.0.1:9200/<NOMINDICE>/_doc/<NUMINDICE>

(SIN CONTRASEÑA)
curl -H "Content-Type: application/json" -XDELETE 127.0.0.1:9200/<NOMINDICE>/_doc/<NUMINDICE>

** Busquedas **
# A que ? pertenece una frase: # (Busquedas: _search?pretty)

curl -H "Content-Type: application/json" -XGET '127.0.0.1:9200/<NomIndice>/_search?pretty' -d '
{"query":
{"match_phrase":{"text_entry": "<Frase a buscar>"}}
}'

# Cuantas frases tiene ...(speaker) en ...(play_name) # (Cuantas: _count?pretty)

curl -H "Content-Type: application/json" -XGET 'localhost:9200/shakespeare/_count?pretty' -d '
{"query": {
"bool": {
"filter": [{ "match_phrase": {
"speaker": "OCTAVIUS CAESAR"}}],
"must": [{
"match_phrase": {
"play_name": "Antony and Cleopatra"
 }}]}}}'

# Recuperar los 20 primeros docs del indice #

curl -X GET "localhost:9200/<NomIndice>/_search?pretty" -H 'Content-Type: application/json' -d '
{"size": 20 }'

# Recuperar los segundos 20 docs del indices #

curl -X GET "localhost:9200/<NomIndice>/_search?pretty" -H 'Content-Type: application/json' -d '
{"from": 20,
"size": 20 }'

# Buscar los datos dado un cod o algo para identificar(state:codState) y devolver los primeros 15 rdos. #

curl -X GET "localhost:9200/_search?pretty" -H 'Content-Type: application/json' -d '
{"size": 15, "query": {
   "match": {
     "state": "TX"}}
}'

** Ordenacion ** https://www.elastic.co/guide/en/elasticsearch/reference/current/sort-search-results.html

# Recuperar datos de lo que sea en donde sea(estado: Los Angeles) y mostrarlo ordenados por edad ascendente

curl -X GET "localhost:9200/bank/_search?pretty" -H 'Content-Type: application/json' -d '
{"sort" : [
    { "age" : "asc" }
  ],
  "query" : {
    "match" : { "state" : "LA" }
  }}'

# Recuperar datos de (New Jersey "NJ") y mostrarlo ordenados por su BALANCE de forma ascendente

curl -X GET "localhost:9200/bank/_search?pretty" -H 'Content-Type: application/json' -d'
{"sort" : [
    { "balance" : "asc" }
  ],
  "query" : {
    "match" : { "state" : "NJ" }
  }}'
  
** Filtros ** https://www.elastic.co/guide/en/elasticsearch/reference/current/filter-search-results.html

# Recuperar los datos de usuarios cuyo estado de residencia sea Los Ángeles (must) (código de estado “LA”) pero que
su ciudad de residencia no sea Loretto (must_not), y que además su edad sea superior(gte) a los 33 años (must)

curl -X POST "localhost:9200/bank/_search?pretty" -H 'Content-Type: application/json' -d '
{"query": {
    "bool": {
      "must": [{"match": { "state": "LA" }},
                         { "range": {"age": {"gte": 33}}}],
      "must_not": {"match": {"city": "Loretto"}}}
  }}'

# Recuperar los datos de usuarios cuyo estado de residencia sea Ohio (código de estado “OH”) y su edad sea superior a 39 años.

curl -X POST "localhost:9200/bank/_search?pretty" -H 'Content-Type: application/json' -d ' 
{"query": {
 "bool": {
  "must": [{"match": {"state": "OH"}}, {"range": {"age": {"gte": 39}}}
]}}}'

** Busquedas difusas ** 

# Utilizar una búsqueda difusa para recuperar los datos de la persona residente en Wyoming, pero utilizando ”Woyming” como término de búsqueda. #

curl -X GET "localhost:9200/bank/_search?pretty" -H 'Content-Type: application/json' -d'
{"query": {
    "fuzzy": {
      "city": {
        "value": "Woyming"}}}}'
        
# Modificar la búsqueda anterior para mostrar los datos de la misma persona, pero utilizando “Wyomin” como término de búsqueda. #

curl -X GET "localhost:9200/bank/_search?pretty" -H 'Content-Type: application/json' -d'{
  "query": {
    "fuzzy": {
      "city": {
        "value": "Wyomin" }}}}'
        
** Prefijos de busqueda y comodines **

# Recuperar los datos de las personas cuyos apellidos comiencen (prefix) por “Mc” #

curl -X GET "localhost:9200/_search?pretty" -H 'Content-Type: application/json' -d'{
  "query": {
    "prefix" : { "lastname" : "mc" }
  }}'
  
# Recuperar los datos de las personas cuya ciudad de residencia comience por la letra “G” y acabe con “field”.

curl -X GET "localhost:9200/bank/_search?pretty" -H 'Content-Type: application/json' -d'{
  "query": {
    "wildcard": {
      "city": {
        "value": "g*field"}}}}'
        
** Expresiones regulares **

# Utilizando expresiones regulares, recuperar los datos de las personas cuyo nombre de empleador comience
por la letra "A" y esté compuesto por 4 o 5 letras, p.e. los empleadores "Avit" o "Amtap"

curl -X GET "localhost:9200/bank/_search?pretty" -H 'Content-Type: application/json' -d'{
  "query": {
    "regexp": {
      "employer": "a.{3,4}"}}}'
